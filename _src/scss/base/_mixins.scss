// ==========================================================================
// Base â€“ Mixins
// ==========================================================================

// Vendor prefixes

// Prefixer
@mixin prefix($property, $value, $prefixes: ()) {
	@each $prefix in $prefixes {
		-#{$prefix}-#{$property}: $value;
	}

	#{$property}: $value;
}

@mixin background-size($width, $height: $width) {
	@include prefix(background-size, $width $height, 'webkit' 'moz');
}

@mixin border-radius($radius) {
	@include prefix(border-radius, $radius, 'webkit' 'moz')
}

@mixin border-radius-separate($top-left-radius, $top-right-radius, $bottom-right-radius, $bottom-left-radius) {
	@include prefix(border-top-left-radius, $top-left-radius, 'webkit' 'moz');
	@include prefix(border-top-right-radius, $top-right-radius, 'webkit' 'moz');
	@include prefix(border-bottom-right-radius, $bottom-right-radius, 'webkit' 'moz');
	@include prefix(border-bottom-left-radius, $bottom-left-radius, 'webkit' 'moz');
}

@mixin box-shadow($param...) {
	@include prefix(box-shadow, $param);
}

@mixin box-sizing($type) {
	@include prefix(box-sizing, $type, 'moz');
}

@mixin transition($param...) {
	@include prefix(transition, $param, 'webkit');
}

@mixin transition-delay($param...) {
	@include prefix(transition-delay, $param, 'webkit');
}

@mixin transform($param...) {
	@include prefix(transform, $param, 'webkit');
}

@mixin animation($param...) {
	@include prefix(animation, $param, 'webkit');
}

@mixin background-gradient($start-color, $end-color, $orientation) {
	background: $start-color;

	@if $orientation == 'vertical' {
		background: -webkit-linear-gradient(top, $start-color, $end-color);
		background: linear-gradient(to bottom, $start-color, $end-color);
	} @else if $orientation == 'horizontal' {
		background: -webkit-linear-gradient(left, $start-color, $end-color);
		background: linear-gradient(to right, $start-color, $end-color);
	} @else {
		background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
		background: radial-gradient(ellipse at center, $start-color, $end-color);
	}
}

@mixin opacity($opacity) {
	opacity: $opacity;
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
}

// Shorthands

@mixin size($width, $height) {
	width: $width;
	height: $height;
}

@mixin square($size) {
	@include size($size, $size);
}

@mixin list-reset {
	margin: 0;
	padding: 0;
	list-style: none;
}

@mixin horizontal-padding($value) {
	padding-left: $value;
	padding-right: $value;
}

@mixin vertical-padding($value) {
	padding-top: $value;
	padding-bottom: $value;
}

@mixin clearfix {
	*zoom: 1;
	&:before, &:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

@mixin inline-block {
	display: inline-block;
	*zoom: 1;
	*display: inline;
}

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
	@font-face {
		font-family: quote($font-name);
		src: url($file-name + '.eot');
		src: url($file-name + '.eot?#iefix')  format('embedded-opentype'),
			url($file-name + '.woff') format('woff'),
			url($file-name + '.ttf')  format('truetype'),
			url($file-name + '.svg##{$font-name}')  format('svg');
		font-weight: $weight;
		font-style: $style;
	}
}

// Functions
@function check-background($color) {
	@if (lightness($color) > 66) {
		@return $gray-darker; // Lighter background, return dark color
	} @else {
		@return #fff; // Darker background, return light color
	}
}

// THEME - Mixins
// -----------------------------------

@mixin btn-style ($color) {
	@include box-shadow(inset 0 -2px 0 0 darken($color, 10%));
	background-color: $color;
	color: check-background($color);

	&:hover {
		background-color: lighten($color, 4%);
	}

	&:active, &:focus {
		@include box-shadow(0 0 0 0);
		background-color: darken($color, 5%);
	}
}
